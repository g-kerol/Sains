<!DOCTYPE html>
<html lang="ms">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Borang Pendaftaran - Kelas Persediaan Akhir UASA Sains</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        body {
            box-sizing: border-box;
        }
        
        /* Slide Toggle Button Styles */
        .slide-toggle {
            position: relative;
            display: inline-block;
            width: 50px;
            height: 24px;
        }
        
        .slide-toggle input {
            opacity: 0;
            width: 0;
            height: 0;
        }
        
        .slider {
            position: absolute;
            cursor: pointer;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background-color: #e5e7eb;
            transition: .3s;
            border-radius: 24px;
            border: 2px solid #d1d5db;
        }
        
        .slider:before {
            position: absolute;
            content: "";
            height: 16px;
            width: 16px;
            left: 2px;
            bottom: 2px;
            background-color: white;
            transition: .3s;
            border-radius: 50%;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }
        
        .slide-toggle input:checked + .slider {
            background-color: #10b981;
            border-color: #059669;
        }
        
        .slide-toggle input:checked + .slider:before {
            transform: translateX(26px);
        }
        
        .slide-toggle.payment input:checked + .slider {
            background-color: #10b981;
            border-color: #059669;
        }
        
        .slide-toggle.attendance input:checked + .slider {
            background-color: #3b82f6;
            border-color: #2563eb;
        }
        
        .slider:hover {
            box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
        }
    </style>
</head>
<body class="bg-gradient-to-br from-blue-50 to-indigo-100 min-h-screen py-8">
    <div class="max-w-2xl mx-auto px-4">
        <!-- Main Form Content -->
        <div id="mainContent">
            <!-- Header -->
            <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
                <div class="text-center mb-6">
                    <h1 class="text-3xl font-bold text-indigo-800 mb-2">Kelas Persediaan Akhir UASA</h1>
                    <h2 class="text-xl font-semibold text-indigo-600">Subjek: Sains</h2>
                </div>
                
                <!-- Compact Info Section -->
                <div class="bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg p-4 mb-6">
                    <div class="grid md:grid-cols-2 gap-3 text-sm">
                        <div class="flex items-center">
                            <span class="text-lg mr-2">👨‍🏫</span>
                            <span class="text-gray-700">Cikgu Khairul 
                                <a href="https://wa.me/60126866412" target="_blank" rel="noopener noreferrer" class="text-green-600 hover:text-green-700 font-medium inline-flex items-center">
                                    <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 24 24">
                                        <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                                    </svg>
                                    0126866412
                                </a>
                            </span>
                        </div>
                        <div class="flex items-center">
                            <span class="text-lg mr-2">🗓</span>
                            <span class="text-gray-700">04 Oktober 2025 (Sabtu)</span>
                        </div>
                        <div class="flex items-center">
                            <span class="text-lg mr-2">🏫</span>
                            <span class="text-gray-700">Kelas 4 Ibnu Sina</span>
                        </div>
                        <div class="flex items-center">
                            <span class="text-lg mr-2">💰</span>
                            <span class="text-gray-700">RM10 (cash) + bahan</span>
                        </div>
                    </div>
                    
                    <div class="mt-4 p-3 bg-green-100 rounded-lg border border-green-200">
                        <p class="text-green-800 font-medium text-sm text-center">
                            📝 Sila isi nama sebelum jam 5 ptg • 📑 Bawa alat tulis & buku teks
                        </p>
                    </div>
                </div>
                
                <div class="text-center">
                    <p class="text-gray-600 font-medium">Sila lengkapkan borang pendaftaran di bawah</p>
                </div>
            </div>

            <!-- Registration Closed Message (Hidden by default) -->
            <div id="registrationClosedMessage" class="hidden bg-red-50 border border-red-200 rounded-lg shadow-xl p-8 border border-red-100">
                <div class="text-center">
                    <div class="bg-red-100 rounded-full p-4 w-16 h-16 mx-auto mb-4">
                        <svg class="w-8 h-8 text-red-600 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </div>
                    <h3 class="text-2xl font-bold text-red-800 mb-4">❌ Pendaftaran Ditutup</h3>
                    <div class="bg-red-100 rounded-lg p-6 mb-6">
                        <p class="text-red-800 font-medium text-lg leading-relaxed">
                            Terima Kasih semua. Slot kelas terpaksa di tutup kerana bilangan murid melebihi had yang dirancang.
                        </p>
                    </div>
                    <div class="text-center">
                        <p class="text-red-600 font-medium">Untuk sebarang pertanyaan, sila hubungi:</p>
                        <a href="https://wa.me/60126866412?text=Assalamualaikum%20Cikgu%20Khairul,%20saya%20ingin%20bertanya%20mengenai%20Kelas%20Persediaan%20Akhir%20UASA%20Sains." target="_blank" rel="noopener noreferrer" class="inline-flex items-center mt-3 bg-green-600 hover:bg-green-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-md hover:shadow-lg">
                            <svg class="w-5 h-5 mr-2" fill="currentColor" viewBox="0 0 24 24">
                                <path d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.890-5.335 11.893-11.893A11.821 11.821 0 0020.885 3.488"/>
                            </svg>
                            Cikgu Khairul - 0126866412
                        </a>
                    </div>
                </div>
            </div>

            <!-- Form -->
            <div id="registrationFormContainer" class="bg-gradient-to-br from-white to-blue-50 rounded-lg shadow-xl p-8 border border-blue-100">
                <div class="text-center mb-6">
                    <h3 class="text-2xl font-bold text-indigo-800 mb-2">📝 Borang Pendaftaran</h3>
                    <div class="w-20 h-1 bg-gradient-to-r from-indigo-500 to-blue-500 mx-auto rounded-full"></div>
                </div>
                <form id="registrationForm" class="space-y-6">
                    <!-- Nama Murid -->
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                            <span class="mr-2">👤</span>
                            Nama Murid * <span class="text-xs text-gray-500 ml-2">(Huruf besar sahaja)</span>
                        </label>
                        <input type="text" id="namaInput" required class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 hover:shadow-md" placeholder="Masukkan nama penuh murid (HURUF BESAR)">
                        <div class="absolute left-3 top-12 text-gray-400">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            </svg>
                        </div>
                        <div id="namaError" class="hidden mt-2 text-red-600 text-sm flex items-center">
                            <svg class="w-4 h-4 mr-1" fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clip-rule="evenodd"></path>
                            </svg>
                            Nama mesti dalam huruf besar sahaja!
                        </div>
                    </div>

                    <!-- Kelas -->
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                            <span class="mr-2">🏫</span>
                            Kelas *
                        </label>
                        <select required class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 hover:shadow-md appearance-none bg-white">
                            <option value="">Pilih kelas</option>
                            <option value="4IB">4IB</option>
                            <option value="4IH">4IH</option>
                            <option value="4IK">4IK</option>
                            <option value="4IM">4IM</option>
                            <option value="4IS">4IS</option>
                        </select>
                        <div class="absolute left-3 top-12 text-gray-400">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            </svg>
                        </div>
                        <div class="absolute right-3 top-12 text-gray-400">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                            </svg>
                        </div>
                    </div>

                    <!-- Slot Masa -->
                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                            <span class="mr-2">⏰</span>
                            Slot Masa *
                        </label>
                        <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-4">
                            <div class="flex items-start">
                                <span class="text-xl mr-2 mt-1">ℹ️</span>
                                <div>
                                    <p class="text-blue-800 font-medium text-sm">Murid dibenarkan pilih 1 sahaja. Ini bagi memberi peluang kepada murid lain dan mengelakkan bilangan murid terlalu ramai dalam satu sesi.</p>
                                </div>
                            </div>
                        </div>
                        <div class="space-y-3">
                            <label class="flex items-center p-4 border-2 border-gray-300 rounded-xl hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer transition-all duration-200 hover:shadow-md hover:border-indigo-300">
                                <input type="radio" name="slot_masa" value="8.00-9.15 pagi" required class="text-indigo-600 focus:ring-indigo-500 mr-4 w-5 h-5">
                                <div class="flex items-center">
                                    <span class="text-2xl mr-3">🌅</span>
                                    <div>
                                        <span class="font-semibold text-gray-900 text-lg">8.00 - 9.15 pagi</span>
                                        <p class="text-sm text-gray-600">Slot pagi awal</p>
                                    </div>
                                </div>
                            </label>
                            
                            <label class="flex items-center p-4 border-2 border-gray-300 rounded-xl hover:bg-gradient-to-r hover:from-blue-50 hover:to-indigo-50 cursor-pointer transition-all duration-200 hover:shadow-md hover:border-indigo-300">
                                <input type="radio" name="slot_masa" value="9.30-10.45 pagi" required class="text-indigo-600 focus:ring-indigo-500 mr-4 w-5 h-5">
                                <div class="flex items-center">
                                    <span class="text-2xl mr-3">☀️</span>
                                    <div>
                                        <span class="font-semibold text-gray-900 text-lg">9.30 - 10.45 pagi</span>
                                        <p class="text-sm text-gray-600">Slot pagi lewat</p>
                                    </div>
                                </div>
                            </label>
                        </div>
                    </div>

                    <!-- No Telefon Ibu/Ayah -->
                    <div class="relative">
                        <label class="block text-sm font-medium text-gray-700 mb-2 flex items-center">
                            <span class="mr-2">📞</span>
                            No. Telefon Ibu/Ayah *
                        </label>
                        <input type="tel" required pattern="[0-9]{10,11}" class="w-full px-4 py-3 pl-12 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200 hover:shadow-md" placeholder="cth: 0123456789">
                        <div class="absolute left-3 top-12 text-gray-400">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"></path>
                            </svg>
                        </div>
                    </div>

                    <!-- Submit Button -->
                    <div class="flex justify-center pt-8">
                        <button type="submit" class="bg-gradient-to-r from-indigo-600 to-blue-600 hover:from-indigo-700 hover:to-blue-700 text-white font-bold py-4 px-10 rounded-xl transition-all duration-300 shadow-lg hover:shadow-2xl transform hover:-translate-y-1 hover:scale-105 flex items-center space-x-2">
                            <span>📝</span>
                            <span>Hantar Pendaftaran</span>
                            <svg class="w-5 h-5 ml-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
                            </svg>
                        </button>
                    </div>
                </form>
            </div>

            <!-- Admin Access (Hidden by default) -->
            <div class="text-center mt-6">
                <button id="adminAccessBtn" class="bg-gradient-to-r from-gray-500 to-gray-600 hover:from-gray-600 hover:to-gray-700 text-white font-medium py-2 px-4 rounded-lg transition-all duration-300 text-sm opacity-50 hover:opacity-100">
                    🔐 Admin
                </button>
            </div>

            <!-- Admin Login Modal (Hidden by default) -->
            <div id="adminModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 shadow-2xl">
                    <div class="text-center mb-6">
                        <h3 class="text-2xl font-bold text-gray-800 mb-2">🔐 Admin Access</h3>
                        <p class="text-gray-600">Masukkan kata laluan untuk akses statistik</p>
                    </div>
                    
                    <form id="adminLoginForm" class="space-y-4">
                        <div class="relative">
                            <input type="password" id="adminPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200" placeholder="Kata laluan admin">
                            <div id="passwordError" class="hidden mt-2 text-red-600 text-sm">
                                ❌ Kata laluan salah! Cuba lagi.
                            </div>
                        </div>
                        
                        <div class="flex space-x-3">
                            <button type="submit" class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors">
                                Masuk
                            </button>
                            <button type="button" id="cancelAdminBtn" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-lg transition-colors">
                                Batal
                            </button>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Success Message (Hidden by default) -->
            <div id="successMessage" class="hidden bg-green-50 border border-green-200 rounded-lg p-6 mt-6">
                <div class="flex items-center mb-4">
                    <div class="bg-green-100 rounded-full p-2 mr-4">
                        <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                        </svg>
                    </div>
                    <div>
                        <h3 class="text-lg font-semibold text-green-800">Pendaftaran Berjaya!</h3>
                        <p class="text-green-700">Terima kasih! Pendaftaran untuk Kelas Persediaan Akhir UASA - Sains telah diterima dan dihantar ke Google Sheets.</p>
                    </div>
                </div>
                <div class="text-center">
                    <button id="daftarBaharu" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 flex items-center mx-auto">
                        <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                        </svg>
                        Daftar Baharu
                    </button>
                </div>
            </div>
        </div>

        <!-- Statistics Page (Hidden by default) -->
        <div id="statisticsPage" class="hidden">
            <!-- Statistics Header -->
            <div class="bg-white rounded-lg shadow-lg p-8 mb-8">
                <div class="text-center mb-6">
                    <h1 class="text-3xl font-bold text-purple-800 mb-2">📊 Statistik Pendaftaran</h1>
                    <h2 class="text-xl font-semibold text-purple-600">Kelas Persediaan Akhir UASA - Sains</h2>
                </div>
                
                <div class="text-center">
                    <button id="backToFormBtn" class="bg-gradient-to-r from-indigo-600 to-blue-600 hover:from-indigo-700 hover:to-blue-700 text-white font-semibold py-3 px-6 rounded-lg transition-all duration-300 shadow-md hover:shadow-lg transform hover:-translate-y-0.5 flex items-center mx-auto space-x-2">
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
                        </svg>
                        <span>Kembali ke Borang</span>
                    </button>
                </div>
            </div>

            <!-- Tab Navigation -->
            <div class="bg-white rounded-lg shadow-lg p-6 mb-6 border border-purple-200">
                <div class="flex justify-center space-x-4">
                    <button id="statisticsTab" class="tab-button active bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-purple-700 flex items-center">
                        <span class="mr-2">📈</span>
                        Statistik
                    </button>
                    <button id="paymentTab" class="tab-button bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-gray-300 flex items-center">
                        <span class="mr-2">💰</span>
                        Bayaran
                    </button>
                </div>
            </div>

            <!-- Statistics Dashboard -->
            <div id="statisticsContent" class="bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg shadow-lg p-6 border border-purple-200">
                <div class="text-center mb-6">
                    <h3 class="text-2xl font-bold text-purple-800 mb-2 flex items-center justify-center">
                        <span class="mr-3">📈</span>
                        Data Pendaftaran Murid
                    </h3>
                    <div class="w-20 h-1 bg-gradient-to-r from-purple-500 to-indigo-500 mx-auto rounded-full"></div>
                </div>
                
                <!-- Total Registered -->
                <div class="bg-white rounded-lg p-4 mb-6 shadow-md border border-purple-100">
                    <div class="flex items-center justify-center">
                        <div class="bg-purple-100 rounded-full p-3 mr-4">
                            <svg class="w-8 h-8 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                            </svg>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold text-purple-800" id="totalRegistered">0</p>
                            <p class="text-purple-600 font-medium">Jumlah Murid Daftar</p>
                        </div>
                    </div>
                </div>

                <!-- Slot Statistics -->
                <div class="grid md:grid-cols-2 gap-4 mb-6">
                    <!-- Slot 1 -->
                    <div class="bg-white rounded-lg p-6 shadow-md border border-orange-200 hover:shadow-lg transition-shadow">
                        <div class="flex items-center mb-4">
                            <div class="bg-orange-100 rounded-full p-3 mr-4">
                                <span class="text-2xl">🌅</span>
                            </div>
                            <div>
                                <h4 class="text-lg font-bold text-orange-800">Slot Pagi Awal</h4>
                                <p class="text-orange-600 text-sm">8.00 - 9.15 pagi</p>
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold text-orange-700" id="slot1Count">0</p>
                            <p class="text-orange-600 font-medium">murid daftar</p>
                        </div>
                        <div class="mt-4">
                            <div class="bg-orange-200 rounded-full h-3">
                                <div class="bg-gradient-to-r from-orange-400 to-orange-500 h-3 rounded-full transition-all duration-500" id="slot1Progress" style="width: 0%"></div>
                            </div>
                            <p class="text-xs text-orange-600 mt-1 text-center" id="slot1Percentage">0% daripada jumlah</p>
                        </div>
                    </div>

                    <!-- Slot 2 -->
                    <div class="bg-white rounded-lg p-6 shadow-md border border-yellow-200 hover:shadow-lg transition-shadow">
                        <div class="flex items-center mb-4">
                            <div class="bg-yellow-100 rounded-full p-3 mr-4">
                                <span class="text-2xl">☀️</span>
                            </div>
                            <div>
                                <h4 class="text-lg font-bold text-yellow-800">Slot Pagi Lewat</h4>
                                <p class="text-yellow-600 text-sm">9.30 - 10.45 pagi</p>
                            </div>
                        </div>
                        <div class="text-center">
                            <p class="text-3xl font-bold text-yellow-700" id="slot2Count">0</p>
                            <p class="text-yellow-600 font-medium">murid daftar</p>
                        </div>
                        <div class="mt-4">
                            <div class="bg-yellow-200 rounded-full h-3">
                                <div class="bg-gradient-to-r from-yellow-400 to-yellow-500 h-3 rounded-full transition-all duration-500" id="slot2Progress" style="width: 0%"></div>
                            </div>
                            <p class="text-xs text-yellow-600 mt-1 text-center" id="slot2Percentage">0% daripada jumlah</p>
                        </div>
                    </div>
                </div>

                <!-- Class Breakdown -->
                <div class="bg-white rounded-lg p-6 mb-6 shadow-md border border-purple-100">
                    <h4 class="text-lg font-bold text-purple-800 mb-4 flex items-center">
                        <span class="mr-2">🏫</span>
                        Pecahan Mengikut Kelas
                        <span class="text-sm text-purple-600 ml-2 font-normal">(Klik untuk lihat senarai murid)</span>
                    </h4>
                    <div class="grid grid-cols-5 gap-3" id="classBreakdown">
                        <div class="text-center p-3 bg-purple-50 rounded-lg border border-purple-200 hover:bg-purple-100 hover:border-purple-300 cursor-pointer transition-all duration-200 hover:shadow-md transform hover:scale-105" onclick="showClassStudents('4IB')">
                            <p class="font-bold text-purple-800">4IB</p>
                            <p class="text-2xl font-bold text-purple-600" id="class4IB">0</p>
                            <p class="text-xs text-purple-500 mt-1">👆 Klik lihat</p>
                        </div>
                        <div class="text-center p-3 bg-purple-50 rounded-lg border border-purple-200 hover:bg-purple-100 hover:border-purple-300 cursor-pointer transition-all duration-200 hover:shadow-md transform hover:scale-105" onclick="showClassStudents('4IH')">
                            <p class="font-bold text-purple-800">4IH</p>
                            <p class="text-2xl font-bold text-purple-600" id="class4IH">0</p>
                            <p class="text-xs text-purple-500 mt-1">👆 Klik lihat</p>
                        </div>
                        <div class="text-center p-3 bg-purple-50 rounded-lg border border-purple-200 hover:bg-purple-100 hover:border-purple-300 cursor-pointer transition-all duration-200 hover:shadow-md transform hover:scale-105" onclick="showClassStudents('4IK')">
                            <p class="font-bold text-purple-800">4IK</p>
                            <p class="text-2xl font-bold text-purple-600" id="class4IK">0</p>
                            <p class="text-xs text-purple-500 mt-1">👆 Klik lihat</p>
                        </div>
                        <div class="text-center p-3 bg-purple-50 rounded-lg border border-purple-200 hover:bg-purple-100 hover:border-purple-300 cursor-pointer transition-all duration-200 hover:shadow-md transform hover:scale-105" onclick="showClassStudents('4IM')">
                            <p class="font-bold text-purple-800">4IM</p>
                            <p class="text-2xl font-bold text-purple-600" id="class4IM">0</p>
                            <p class="text-xs text-purple-500 mt-1">👆 Klik lihat</p>
                        </div>
                        <div class="text-center p-3 bg-purple-50 rounded-lg border border-purple-200 hover:bg-purple-100 hover:border-purple-300 cursor-pointer transition-all duration-200 hover:shadow-md transform hover:scale-105" onclick="showClassStudents('4IS')">
                            <p class="font-bold text-purple-800">4IS</p>
                            <p class="text-2xl font-bold text-purple-600" id="class4IS">0</p>
                            <p class="text-xs text-purple-500 mt-1">👆 Klik lihat</p>
                        </div>
                    </div>
                </div>



                <!-- Admin Controls -->
                <div class="bg-white rounded-lg p-6 mb-6 shadow-md border border-purple-100">
                    <h4 class="text-lg font-bold text-purple-800 mb-4 flex items-center">
                        <span class="mr-2">⚙️</span>
                        Kawalan Admin
                    </h4>
                    
                    <!-- Data Refresh Control -->
                    <div class="mb-6">
                        <div class="flex items-center justify-between p-4 bg-blue-50 rounded-lg border border-blue-200">
                            <div class="flex items-center">
                                <div class="bg-blue-100 rounded-full p-2 mr-3">
                                    <span class="text-xl">🔄</span>
                                </div>
                                <div>
                                    <h5 class="font-semibold text-blue-800">Kemaskini Data</h5>
                                    <p class="text-sm text-blue-600">Ambil data terkini dari Google Sheets</p>
                                </div>
                            </div>
                            <button id="refreshDataBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors flex items-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                <span id="refreshBtnText">Refresh Data</span>
                            </button>
                        </div>
                    </div>
                    
                    <!-- Registration Status Control -->
                    <div class="mb-6">
                        <div class="flex items-center justify-between p-4 bg-purple-50 rounded-lg border border-purple-200">
                            <div class="flex items-center">
                                <div class="bg-purple-100 rounded-full p-2 mr-3">
                                    <span class="text-xl" id="registrationStatusIcon">✅</span>
                                </div>
                                <div>
                                    <h5 class="font-semibold text-purple-800">Status Pendaftaran</h5>
                                    <p class="text-sm text-purple-600" id="registrationStatusText">Pendaftaran dibuka</p>
                                </div>
                            </div>
                            <button id="toggleRegistrationBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors">
                                Tutup Pendaftaran
                            </button>
                        </div>
                    </div>
                    
                    <!-- Password Management -->
                    <div class="mb-4">
                        <h5 class="font-semibold text-purple-800 mb-3 flex items-center">
                            <span class="mr-2">🔑</span>
                            Pengurusan Kata Laluan
                        </h5>
                        <div class="grid md:grid-cols-2 gap-3">
                            <button id="changePasswordBtn" class="bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors flex items-center justify-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"></path>
                                </svg>
                                Tukar Kata Laluan
                            </button>
                            <button id="resetPasswordBtn" class="bg-orange-600 hover:bg-orange-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors flex items-center justify-center">
                                <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                                </svg>
                                Reset ke Default
                            </button>
                        </div>
                    </div>
                </div>

                <!-- Last Updated -->
                <div class="text-center mt-6">
                    <p class="text-sm text-purple-600">
                        <span class="mr-1">🕒</span>
                        Dikemaskini: <span id="lastUpdated">-</span>
                    </p>
                </div>
            </div>

            <!-- Payment Dashboard -->
            <div id="paymentContent" class="hidden bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg shadow-lg p-6 border border-green-200">
                <div class="text-center mb-6">
                    <h3 class="text-2xl font-bold text-green-800 mb-2 flex items-center justify-center">
                        <span class="mr-3">💰</span>
                        Pengurusan Bayaran & Kehadiran
                    </h3>
                    <div class="w-20 h-1 bg-gradient-to-r from-green-500 to-emerald-500 mx-auto rounded-full"></div>
                </div>

                <!-- Payment Statistics -->
                <div class="grid grid-cols-2 md:grid-cols-4 gap-3 mb-4">
                    <!-- Total Students -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-blue-200">
                        <div class="flex items-center justify-center">
                            <div class="bg-blue-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">👥</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-blue-800" id="paymentTotalStudents">0</p>
                                <p class="text-blue-600 text-xs">Jumlah Murid</p>
                            </div>
                        </div>
                    </div>

                    <!-- Paid Students -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-green-200">
                        <div class="flex items-center justify-center">
                            <div class="bg-green-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">💰</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-green-800" id="paymentPaidCount">0</p>
                                <p class="text-green-600 text-xs">Bayar</p>
                            </div>
                        </div>
                    </div>

                    <!-- Unpaid Students -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-red-200">
                        <div class="flex items-center justify-center">
                            <div class="bg-red-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">💸</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-red-800" id="paymentUnpaidCount">0</p>
                                <p class="text-red-600 text-xs">Belum</p>
                            </div>
                        </div>
                    </div>

                    <!-- Total Revenue -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-purple-200">
                        <div class="flex items-center justify-center">
                            <div class="bg-purple-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">💵</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-purple-800" id="totalRevenue">RM0</p>
                                <p class="text-purple-600 text-xs">Jumlah</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Attendance Statistics -->
                <div class="grid grid-cols-3 gap-3 mb-4">
                    <!-- Present Students -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-emerald-200">
                        <div class="flex items-center">
                            <div class="bg-emerald-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">🎯</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-emerald-800" id="attendancePresentCount">0</p>
                                <p class="text-emerald-600 text-xs">Hadir</p>
                            </div>
                        </div>
                    </div>

                    <!-- Absent Students -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-orange-200">
                        <div class="flex items-center">
                            <div class="bg-orange-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">⭕</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-orange-800" id="attendanceAbsentCount">0</p>
                                <p class="text-orange-600 text-xs">Tidak</p>
                            </div>
                        </div>
                    </div>

                    <!-- Attendance Rate -->
                    <div class="bg-white rounded-lg p-3 shadow-sm border border-purple-200">
                        <div class="flex items-center">
                            <div class="bg-purple-100 rounded-full p-2 w-8 h-8 flex items-center justify-center mr-3">
                                <span class="text-sm">📊</span>
                            </div>
                            <div>
                                <p class="text-lg font-bold text-purple-800" id="attendanceRate">0%</p>
                                <p class="text-purple-600 text-xs">Kadar</p>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Filter and Search -->
                <div class="bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-200">
                    <div class="grid grid-cols-1 md:grid-cols-5 gap-3">
                        <div>
                            <label class="text-xs font-medium text-gray-700 mb-1 block">Kehadiran:</label>
                            <select id="attendanceFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm">
                                <option value="all">Semua</option>
                                <option value="present">Hadir</option>
                                <option value="absent">Tidak Hadir</option>
                            </select>
                        </div>
                        <div>
                            <label class="text-xs font-medium text-gray-700 mb-1 block">Bayaran:</label>
                            <select id="paymentFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm">
                                <option value="all">Semua</option>
                                <option value="paid">Sudah Bayar</option>
                                <option value="unpaid">Belum Bayar</option>
                            </select>
                        </div>
                        <div>
                            <label class="text-xs font-medium text-gray-700 mb-1 block">Kelas:</label>
                            <select id="classFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm">
                                <option value="all">Semua Kelas</option>
                                <option value="4IB">4IB</option>
                                <option value="4IH">4IH</option>
                                <option value="4IK">4IK</option>
                                <option value="4IM">4IM</option>
                                <option value="4IS">4IS</option>
                            </select>
                        </div>
                        <div>
                            <label class="text-xs font-medium text-gray-700 mb-1 block">Slot Masa:</label>
                            <select id="slotFilter" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm">
                                <option value="all">Semua Slot</option>
                                <option value="8.00-9.15 pagi">8.00-9.15 pagi</option>
                                <option value="9.30-10.45 pagi">9.30-10.45 pagi</option>
                            </select>
                        </div>
                        <div>
                            <label class="text-xs font-medium text-gray-700 mb-1 block">Cari:</label>
                            <input type="text" id="searchStudent" placeholder="Nama murid..." class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 text-sm">
                        </div>
                    </div>
                </div>

                <!-- Mark All Buttons -->
                <div class="bg-white rounded-lg p-4 mb-4 shadow-sm border border-gray-200">
                    <div class="flex justify-center space-x-4">
                        <button id="markAllPaymentBtn" class="bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors duration-200 flex items-center">
                            <span class="mr-2">💰</span>
                            <span id="markAllPaymentText">Semua Bayar</span>
                        </button>
                        <button id="markAllAttendanceBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-6 rounded-lg transition-colors duration-200 flex items-center">
                            <span class="mr-2">🎯</span>
                            <span id="markAllAttendanceText">Semua Hadir</span>
                        </button>
                    </div>
                </div>

                <!-- Students Payment List -->
                <div class="bg-white rounded-lg p-4 shadow-sm border border-gray-200">
                    <div class="mb-3">
                        <h4 class="text-md font-bold text-green-800 flex items-center">
                            <span class="mr-2 text-sm">📋</span>
                            Senarai Bayaran & Kehadiran
                        </h4>
                    </div>
                    
                    <div id="paymentStudentsList" class="space-y-2">
                        <p class="text-gray-500 text-center py-8">Tiada pendaftaran lagi</p>
                    </div>
                </div>
            </div>
            
            <!-- Class Students Modal -->
            <div id="classStudentsModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg p-8 max-w-2xl w-full mx-4 shadow-2xl max-h-[80vh] overflow-y-auto">
                    <div class="text-center mb-6">
                        <h3 class="text-2xl font-bold text-purple-800 mb-2 flex items-center justify-center">
                            <span class="mr-2">🏫</span>
                            <span id="classModalTitle">Senarai Murid Kelas</span>
                        </h3>
                        <div class="w-20 h-1 bg-gradient-to-r from-purple-500 to-indigo-500 mx-auto rounded-full"></div>
                    </div>
                    
                    <!-- Class Summary -->
                    <div class="bg-purple-50 rounded-lg p-4 mb-6 border border-purple-200">
                        <div class="grid md:grid-cols-3 gap-4 text-center">
                            <div>
                                <p class="text-2xl font-bold text-purple-800" id="classModalTotal">0</p>
                                <p class="text-purple-600 text-sm">Jumlah Murid</p>
                            </div>
                            <div>
                                <p class="text-2xl font-bold text-orange-700" id="classModalSlot1">0</p>
                                <p class="text-orange-600 text-sm">Slot 8.00-9.15</p>
                            </div>
                            <div>
                                <p class="text-2xl font-bold text-yellow-700" id="classModalSlot2">0</p>
                                <p class="text-yellow-600 text-sm">Slot 9.30-10.45</p>
                            </div>
                        </div>
                    </div>
                    
                    <!-- Students List -->
                    <div id="classStudentsList" class="space-y-3 mb-6">
                        <!-- Students will be populated here -->
                    </div>
                    
                    <div class="text-center">
                        <button id="closeClassModalBtn" class="bg-purple-600 hover:bg-purple-700 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 shadow-md hover:shadow-lg">
                            Tutup
                        </button>
                    </div>
                </div>
            </div>

            <!-- Change Password Modal -->
            <div id="changePasswordModal" class="hidden fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                <div class="bg-white rounded-lg p-8 max-w-md w-full mx-4 shadow-2xl">
                    <div class="text-center mb-6">
                        <h3 class="text-2xl font-bold text-gray-800 mb-2">🔑 Tukar Kata Laluan</h3>
                        <p class="text-gray-600">Masukkan kata laluan baharu untuk admin</p>
                    </div>
                    
                    <form id="changePasswordForm" class="space-y-4">
                        <div class="relative">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Kata Laluan Semasa</label>
                            <input type="password" id="currentPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200" placeholder="Masukkan kata laluan semasa">
                            <div id="currentPasswordError" class="hidden mt-2 text-red-600 text-sm">
                                ❌ Kata laluan semasa salah!
                            </div>
                        </div>
                        
                        <div class="relative">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Kata Laluan Baharu</label>
                            <input type="password" id="newPassword" required minlength="6" class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200" placeholder="Masukkan kata laluan baharu (min 6 aksara)">
                        </div>
                        
                        <div class="relative">
                            <label class="block text-sm font-medium text-gray-700 mb-2">Sahkan Kata Laluan Baharu</label>
                            <input type="password" id="confirmPassword" required class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500 transition-all duration-200" placeholder="Sahkan kata laluan baharu">
                            <div id="confirmPasswordError" class="hidden mt-2 text-red-600 text-sm">
                                ❌ Kata laluan tidak sepadan!
                            </div>
                        </div>
                        
                        <div class="flex space-x-3 pt-4">
                            <button type="submit" class="flex-1 bg-indigo-600 hover:bg-indigo-700 text-white font-semibold py-3 px-4 rounded-lg transition-colors">
                                Simpan
                            </button>
                            <button type="button" id="cancelChangePasswordBtn" class="flex-1 bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-4 rounded-lg transition-colors">
                                Batal
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Local storage for registration data
        let registrations = JSON.parse(localStorage.getItem('uasaRegistrations')) || [];

        // Admin system
        let adminPassword = localStorage.getItem('adminPassword') || 'admin123';
        let isAdminLoggedIn = false;
        let registrationOpen = JSON.parse(localStorage.getItem('registrationOpen')) ?? true;
        
        // Function to refresh data from Google Sheets CSV
        async function refreshData() {
            try {
                console.log('🔄 Fetching data from Google Sheets...');
                
                // Google Sheets CSV URL
                const csvUrl = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vQgWOz_gOtciT9cHESUTkEI6TJZhhrdMqMLo8SdSlMrEpfWtNaoEWCBaHgoYiIuupp3buEWL-OXJx1-/pub?gid=0&single=true&output=csv';
                
                // Add timeout and better error handling
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout
                
                const response = await fetch(csvUrl, {
                    signal: controller.signal,
                    cache: 'no-cache',
                    headers: {
                        'Cache-Control': 'no-cache'
                    }
                });
                
                clearTimeout(timeoutId);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const csvText = await response.text();
                console.log('📄 CSV data received, length:', csvText.length);
                
                // Check if we got valid CSV data
                if (!csvText || csvText.trim().length === 0) {
                    throw new Error('Empty CSV response from Google Sheets');
                }
                
                // Parse CSV data
                const lines = csvText.split('\n').filter(line => line.trim()); // Remove empty lines
                
                if (lines.length === 0) {
                    console.log('⚠️ No data lines found in CSV');
                    // This is not an error - just empty sheet
                    registrations = [];
                    paymentData = {};
                    localStorage.setItem('uasaRegistrations', JSON.stringify(registrations));
                    localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
                    
                    updateStatistics();
                    updateStudentsList();
                    updateRegistrationStatus();
                    
                    if (isAdminLoggedIn) {
                        showTemporaryMessage('ℹ️ Google Sheets kosong - tiada pendaftaran', 'info');
                    }
                    return true;
                }
                
                const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''));
                console.log('📋 CSV headers:', headers);
                
                const newRegistrations = [];
                const newPaymentData = {};
                const seenStudents = new Set(); // Track unique students to prevent duplicates
                let processedRows = 0;
                let duplicateCount = 0;
                
                // Process each data row (skip header)
                for (let i = 1; i < lines.length; i++) {
                    const line = lines[i].trim();
                    if (!line) continue; // Skip empty lines
                    
                    try {
                        // Parse CSV line (handle quoted values)
                        const values = [];
                        let current = '';
                        let inQuotes = false;
                        
                        for (let j = 0; j < line.length; j++) {
                            const char = line[j];
                            if (char === '"') {
                                inQuotes = !inQuotes;
                            } else if (char === ',' && !inQuotes) {
                                values.push(current.trim().replace(/"/g, ''));
                                current = '';
                            } else {
                                current += char;
                            }
                        }
                        values.push(current.trim().replace(/"/g, '')); // Add last value
                        
                        processedRows++;
                        
                        if (values.length >= 5) {
                            const registration = {
                                timestamp: values[0] || '',
                                nama: values[1] || '',
                                kelas: values[2] || '',
                                slotMasa: values[3] || '',
                                telefon: values[4] || ''
                            };
                            
                            // Only add if all required fields are present
                            if (registration.nama && registration.kelas && registration.slotMasa) {
                                // Create unique key to prevent duplicates
                                const uniqueKey = `${registration.nama}_${registration.kelas}_${registration.slotMasa}`;
                                
                                // Skip if we've already seen this student (prevent duplicates)
                                if (seenStudents.has(uniqueKey)) {
                                    console.log('⚠️ Duplicate student detected, skipping:', uniqueKey);
                                    duplicateCount++;
                                    continue;
                                }
                                
                                seenStudents.add(uniqueKey);
                                newRegistrations.push(registration);
                                
                                // Load payment and attendance data from columns G and H (index 6 and 7)
                                const studentId = `${registration.nama}_${registration.kelas}_${registration.timestamp}`;
                                const bayaranStatus = values[6] || '';  // Column G
                                const kehadiranStatus = values[7] || ''; // Column H
                                
                                newPaymentData[studentId] = {
                                    paid: bayaranStatus.toUpperCase() === 'SUDAH',
                                    present: kehadiranStatus.toUpperCase() === 'HADIR'
                                };
                            }
                        }
                    } catch (rowError) {
                        console.warn('⚠️ Error parsing row', i, ':', rowError.message);
                        // Continue processing other rows
                    }
                }
                
                console.log('✅ Processing complete:');
                console.log('  - Rows processed:', processedRows);
                console.log('  - Valid registrations:', newRegistrations.length);
                console.log('  - Duplicates removed:', duplicateCount);
                
                // Update local storage with fresh data
                registrations = newRegistrations;
                paymentData = newPaymentData;
                localStorage.setItem('uasaRegistrations', JSON.stringify(registrations));
                localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
                
                // Update all displays
                updateStatistics();
                updateStudentsList();
                updateRegistrationStatus();
                
                // Show success message if in admin mode
                if (isAdminLoggedIn) {
                    let message = `✅ Data dikemaskini: ${registrations.length} pendaftaran`;
                    if (duplicateCount > 0) {
                        message += ` (${duplicateCount} duplicate dibuang)`;
                    }
                    showTemporaryMessage(message, 'success');
                }
                
                console.log('✅ Data refresh completed successfully');
                return true;
                
            } catch (error) {
                console.error('❌ Error refreshing data:', error);
                
                // Determine error type for better user feedback
                let errorMessage = '⚠️ Menggunakan data tempatan';
                
                if (error.name === 'AbortError') {
                    errorMessage = '⏱️ Timeout - menggunakan data tempatan';
                    console.log('Request timed out after 10 seconds');
                } else if (error.message.includes('Failed to fetch')) {
                    errorMessage = '🌐 Tiada sambungan internet - menggunakan data tempatan';
                    console.log('Network error - no internet connection');
                } else if (error.message.includes('HTTP')) {
                    errorMessage = '📄 Google Sheets tidak dapat diakses - menggunakan data tempatan';
                    console.log('HTTP error from Google Sheets');
                } else {
                    console.log('Unknown error:', error.message);
                }
                
                // Fallback to local data (this should not fail)
                try {
                    registrations = JSON.parse(localStorage.getItem('uasaRegistrations')) || [];
                    paymentData = JSON.parse(localStorage.getItem('uasaPaymentData')) || {};
                    
                    updateStatistics();
                    updateStudentsList();
                    updateRegistrationStatus();
                    
                    // Show appropriate message if in admin mode
                    if (isAdminLoggedIn) {
                        showTemporaryMessage(errorMessage, 'warning');
                    }
                    
                    console.log('✅ Fallback to local data successful:', registrations.length, 'registrations');
                    return false; // Indicate we used fallback data
                    
                } catch (localError) {
                    console.error('❌ Critical error: Local data also failed:', localError);
                    
                    // Last resort - initialize empty data
                    registrations = [];
                    paymentData = {};
                    
                    updateStatistics();
                    updateStudentsList();
                    updateRegistrationStatus();
                    
                    if (isAdminLoggedIn) {
                        showTemporaryMessage('❌ Ralat kritikal - data direset', 'warning');
                    }
                    
                    return false;
                }
            }
        }
        
        // Function to show temporary status messages
        function showTemporaryMessage(message, type = 'success') {
            // Create message element
            const messageDiv = document.createElement('div');
            messageDiv.className = `fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg transition-all duration-300 transform translate-x-full`;
            
            if (type === 'success') {
                messageDiv.className += ' bg-green-100 border border-green-200 text-green-800';
            } else if (type === 'warning') {
                messageDiv.className += ' bg-yellow-100 border border-yellow-200 text-yellow-800';
            } else if (type === 'info') {
                messageDiv.className += ' bg-blue-100 border border-blue-200 text-blue-800';
            } else {
                messageDiv.className += ' bg-gray-100 border border-gray-200 text-gray-800';
            }
            
            messageDiv.innerHTML = `
                <div class="flex items-center">
                    <span class="mr-2">${type === 'success' ? '✅' : type === 'warning' ? '⚠️' : type === 'info' ? 'ℹ️' : '📝'}</span>
                    <span class="font-medium">${message}</span>
                </div>
            `;
            
            document.body.appendChild(messageDiv);
            
            // Animate in
            setTimeout(() => {
                messageDiv.classList.remove('translate-x-full');
            }, 100);
            
            // Animate out and remove
            setTimeout(() => {
                messageDiv.classList.add('translate-x-full');
                setTimeout(() => {
                    if (document.body.contains(messageDiv)) {
                        document.body.removeChild(messageDiv);
                    }
                }, 300);
            }, 4000); // Show info messages a bit longer
        }
        
        // Page navigation elements (will be handled by safety checks below)
        const mainContent = document.getElementById('mainContent');
        const statisticsPage = document.getElementById('statisticsPage');
        const adminModal = document.getElementById('adminModal');
        const adminLoginForm = document.getElementById('adminLoginForm');
        const cancelAdminBtn = document.getElementById('cancelAdminBtn');
        const backToFormBtn = document.getElementById('backToFormBtn');

        // Admin button click will be handled by the safety check section below

        // Cancel admin login with safety check
        if (cancelAdminBtn && adminModal) {
            cancelAdminBtn.addEventListener('click', function() {
                console.log('🚫 Cancel admin button clicked');
                adminModal.classList.add('hidden');
                const passwordInput = document.getElementById('adminPassword');
                const passwordError = document.getElementById('passwordError');
                if (passwordInput) passwordInput.value = '';
                if (passwordError) passwordError.classList.add('hidden');
            });
            console.log('✅ Cancel admin button listener added');
        } else {
            console.error('❌ Cancel admin button or modal not found');
        }

        // Close modal when clicking outside with safety check
        if (adminModal) {
            adminModal.addEventListener('click', function(e) {
                if (e.target === adminModal) {
                    console.log('🚫 Closing admin modal (clicked outside)');
                    adminModal.classList.add('hidden');
                    const passwordInput = document.getElementById('adminPassword');
                    const passwordError = document.getElementById('passwordError');
                    if (passwordInput) passwordInput.value = '';
                    if (passwordError) passwordError.classList.add('hidden');
                }
            });
            console.log('✅ Admin modal outside click listener added');
        } else {
            console.error('❌ Admin modal not found for outside click');
        }

        // Admin login form with safety check
        if (adminLoginForm) {
            adminLoginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('🔐 Admin login form submitted');
                
                const passwordInput = document.getElementById('adminPassword');
                const passwordError = document.getElementById('passwordError');
                
                if (!passwordInput) {
                    console.error('❌ Password input not found');
                    return;
                }
                
                const enteredPassword = passwordInput.value;
                console.log('Admin login attempt with password:', enteredPassword);
                console.log('Expected password:', adminPassword);
                
                if (enteredPassword === adminPassword) {
                    // Correct password
                    console.log('✅ Password correct, logging in admin...');
                    isAdminLoggedIn = true;
                    
                    if (adminModal) adminModal.classList.add('hidden');
                    
                    // Show statistics page
                    if (mainContent) mainContent.style.display = 'none';
                    if (statisticsPage) {
                        statisticsPage.classList.remove('hidden');
                        statisticsPage.style.display = 'block';
                    }
                    
                    // Refresh data from Google Sheets
                    await refreshData();
                    
                    // Start auto-refresh for admin
                    startAutoRefresh();
                    
                    // Update registration status
                    updateRegistrationStatus();
                    
                    // Scroll to top
                    window.scrollTo({ top: 0, behavior: 'smooth' });
                    
                    // Clear form
                    passwordInput.value = '';
                    if (passwordError) passwordError.classList.add('hidden');
                    
                    console.log('✅ Admin login successful');
                } else {
                    // Wrong password
                    console.log('❌ Password incorrect');
                    if (passwordError) passwordError.classList.remove('hidden');
                    passwordInput.value = '';
                    passwordInput.focus();
                }
            });
            console.log('✅ Admin login form listener added');
        } else {
            console.error('❌ Admin login form not found');
        }

        // Back to form with safety check
        if (backToFormBtn) {
            backToFormBtn.addEventListener('click', function() {
                console.log('🔙 Back to form button clicked');
                
                if (statisticsPage) {
                    statisticsPage.classList.add('hidden');
                    statisticsPage.style.display = 'none';
                }
                if (mainContent) {
                    mainContent.style.display = 'block';
                }
                
                // Reset admin login status and stop auto-refresh
                isAdminLoggedIn = false;
                stopAutoRefresh();
                
                // Scroll to top
                window.scrollTo({ top: 0, behavior: 'smooth' });
                
                console.log('✅ Returned to main form');
            });
            console.log('✅ Back to form button listener added');
        } else {
            console.error('❌ Back to form button not found');
        }

        // Payment and attendance data management
        let paymentData = JSON.parse(localStorage.getItem('uasaPaymentData')) || {};
        
        // Initialize payment data for new students
        function initializePaymentData() {
            registrations.forEach(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                if (!paymentData[studentId]) {
                    paymentData[studentId] = {
                        paid: false,
                        present: false
                    };
                }
            });
            localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
        }
        
        // Update payment statistics
        function updatePaymentStatistics() {
            const totalStudents = registrations.length;
            let presentCount = 0;
            let paidCount = 0;
            
            registrations.forEach(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                
                if (payment.present) presentCount++;
                if (payment.paid) paidCount++;
            });
            
            const absentCount = totalStudents - presentCount;
            const unpaidCount = totalStudents - paidCount;
            const attendanceRate = totalStudents > 0 ? Math.round((presentCount / totalStudents) * 100) : 0;
            const totalRevenue = paidCount * 10; // RM10 per student
            
            // Update student count
            document.getElementById('paymentTotalStudents').textContent = totalStudents;
            
            // Update payment statistics
            document.getElementById('paymentPaidCount').textContent = paidCount;
            document.getElementById('paymentUnpaidCount').textContent = unpaidCount;
            document.getElementById('totalRevenue').textContent = `RM${totalRevenue}`;
            
            // Update attendance statistics
            document.getElementById('attendancePresentCount').textContent = presentCount;
            document.getElementById('attendanceAbsentCount').textContent = absentCount;
            document.getElementById('attendanceRate').textContent = `${attendanceRate}%`;
        }
        
        // Update payment students list
        function updatePaymentStudentsList() {
            const paymentStudentsList = document.getElementById('paymentStudentsList');
            const paymentFilter = document.getElementById('paymentFilter')?.value || 'all';
            const classFilter = document.getElementById('classFilter')?.value || 'all';
            const slotFilter = document.getElementById('slotFilter')?.value || 'all';
            const searchTerm = document.getElementById('searchStudent')?.value.toLowerCase() || '';
            
            if (registrations.length === 0) {
                paymentStudentsList.innerHTML = '<p class="text-gray-500 text-center py-8">Tiada pendaftaran lagi</p>';
                return;
            }
            
            // Filter students
            let filteredStudents = registrations.filter(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                
                // Apply attendance filter
                const attendanceFilter = document.getElementById('attendanceFilter')?.value || 'all';
                if (attendanceFilter === 'present' && !payment.present) return false;
                if (attendanceFilter === 'absent' && payment.present) return false;
                
                // Apply payment filter
                if (paymentFilter === 'paid' && !payment.paid) return false;
                if (paymentFilter === 'unpaid' && payment.paid) return false;
                
                if (classFilter !== 'all' && student.kelas !== classFilter) return false;
                if (slotFilter !== 'all' && student.slotMasa !== slotFilter) return false;
                
                if (searchTerm && !student.nama.toLowerCase().includes(searchTerm)) return false;
                
                return true;
            });
            
            if (filteredStudents.length === 0) {
                paymentStudentsList.innerHTML = '<p class="text-gray-500 text-center py-8">Tiada murid yang sepadan dengan penapis</p>';
                return;
            }
            
            const studentsHTML = filteredStudents.map((student, index) => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                
                return `
                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200 hover:shadow-sm transition-all duration-200">
                        <div class="flex items-center">
                            <div class="bg-gray-200 rounded-full w-6 h-6 flex items-center justify-center mr-3">
                                <span class="text-gray-600 font-bold text-xs">${index + 1}</span>
                            </div>
                            <div>
                                <p class="font-medium text-gray-800 text-sm">${student.nama}</p>
                                <p class="text-xs text-gray-500">${student.kelas}</p>
                            </div>
                        </div>
                        <div class="flex items-center space-x-6">
                            <!-- Payment Slide Toggle -->
                            <div class="flex items-center space-x-2">
                                <span class="text-xs text-gray-600 font-medium">💰</span>
                                <label class="slide-toggle payment">
                                    <input type="checkbox" id="payment_${studentId}" ${payment.paid ? 'checked' : ''} 
                                           onchange="togglePayment('${studentId}')">
                                    <span class="slider"></span>
                                </label>
                            </div>
                            <!-- Attendance Slide Toggle -->
                            <div class="flex items-center space-x-2">
                                <span class="text-xs text-gray-600 font-medium">🎯</span>
                                <label class="slide-toggle attendance">
                                    <input type="checkbox" id="attendance_${studentId}" ${payment.present ? 'checked' : ''} 
                                           onchange="toggleAttendance('${studentId}')">
                                    <span class="slider"></span>
                                </label>
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
            
            paymentStudentsList.innerHTML = studentsHTML;
            
            // Update button texts after updating the list
            updateMarkAllButtonTexts();
        }
        
        // Toggle payment status
        function togglePayment(studentId) {
            if (!paymentData[studentId]) {
                paymentData[studentId] = { paid: false, present: false };
            }
            
            paymentData[studentId].paid = !paymentData[studentId].paid;
            
            // Auto-activate attendance when payment is made
            if (paymentData[studentId].paid) {
                paymentData[studentId].present = true;
                // Update the attendance toggle UI
                const attendanceToggle = document.getElementById(`attendance_${studentId}`);
                if (attendanceToggle) {
                    attendanceToggle.checked = true;
                }
            }
            
            localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
            
            // Sync to Google Sheets
            syncPaymentToGoogleSheets(studentId);
            
            updatePaymentStatistics();
            updateMarkAllButtonTexts();
        }
        
        // Toggle attendance status
        function toggleAttendance(studentId) {
            if (!paymentData[studentId]) {
                paymentData[studentId] = { paid: false, present: false };
            }
            
            paymentData[studentId].present = !paymentData[studentId].present;
            localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
            
            // Sync to Google Sheets
            syncPaymentToGoogleSheets(studentId);
            
            updatePaymentStatistics();
            updateMarkAllButtonTexts();
        }
        
        // Sync payment data to Google Sheets
        async function syncPaymentToGoogleSheets(studentId) {
            try {
                // Find the student data
                const student = registrations.find(r => {
                    const id = `${r.nama}_${r.kelas}_${r.timestamp}`;
                    return id === studentId;
                });
                
                if (!student) {
                    console.error('Student not found for ID:', studentId);
                    return;
                }
                
                const payment = paymentData[studentId] || { paid: false, present: false };
                
                // Prepare data for Google Sheets update
                const updateData = {
                    action: 'updatePayment',
                    timestamp: student.timestamp,
                    nama: student.nama,
                    kelas: student.kelas,
                    slotMasa: student.slotMasa,
                    telefon: student.telefon,
                    bayaran: payment.paid ? 'SUDAH' : 'BELUM',
                    kehadiran: payment.present ? 'HADIR' : 'TIDAK'
                };
                
                console.log('🔄 Syncing payment data to Google Sheets:', updateData);
                
                // Send to Google Sheets
                const googleSheetsUrl = 'https://script.google.com/macros/s/AKfycbxA_6cx4IbdodAmpAPll0c8IfsK-s3rwOeqnBL6bP2fqzmU2BJP8e084a3XnAz_XVsRLA/exec';
                
                await fetch(googleSheetsUrl, {
                    method: 'POST',
                    mode: 'no-cors',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(updateData)
                });
                
                console.log('✅ Payment data synced to Google Sheets successfully');
                
            } catch (error) {
                console.error('❌ Error syncing payment data to Google Sheets:', error);
                // Don't show error to user as the data is still saved locally
            }
        }
        
        // Toggle all payment status
        function toggleAllPayment() {
            const currentStudents = getCurrentFilteredStudents();
            if (currentStudents.length === 0) {
                showTemporaryMessage('⚠️ Tiada murid untuk dikemas kini', 'warning');
                return;
            }
            
            // Check if all current students are paid
            const allPaid = currentStudents.every(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                return payment.paid;
            });
            
            const action = allPaid ? 'unmarked' : 'marked';
            const actionText = allPaid ? 'dihilangkan tanda' : 'ditanda';
            const newStatus = !allPaid;
            
            // Show confirmation
            const confirmMessage = `Adakah anda pasti mahu ${actionText} bayaran untuk ${currentStudents.length} murid?${newStatus ? '\n\n✅ Kehadiran juga akan ditanda automatik.' : ''}`;
            if (!confirm(confirmMessage)) {
                return;
            }
            
            // Update all students
            currentStudents.forEach(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                if (!paymentData[studentId]) {
                    paymentData[studentId] = { paid: false, present: false };
                }
                paymentData[studentId].paid = newStatus;
                
                // Auto-activate attendance when payment is made
                if (newStatus) {
                    paymentData[studentId].present = true;
                }
                
                // Sync each student to Google Sheets
                syncPaymentToGoogleSheets(studentId);
            });
            
            // Save and update
            localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
            updatePaymentStatistics();
            updatePaymentStudentsList();
            
            // Show success message
            const successText = newStatus ? 'ditanda sudah bayar dan hadir' : 'dihilangkan tanda bayaran';
            showTemporaryMessage(`✅ ${currentStudents.length} murid telah ${successText}!`, 'success');
        }
        
        // Toggle all attendance status
        function toggleAllAttendance() {
            const currentStudents = getCurrentFilteredStudents();
            if (currentStudents.length === 0) {
                showTemporaryMessage('⚠️ Tiada murid untuk dikemas kini', 'warning');
                return;
            }
            
            // Check if all current students are present
            const allPresent = currentStudents.every(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                return payment.present;
            });
            
            const action = allPresent ? 'unmarked' : 'marked';
            const actionText = allPresent ? 'dihilangkan tanda' : 'ditanda';
            const newStatus = !allPresent;
            
            // Show confirmation
            const confirmMessage = `Adakah anda pasti mahu ${actionText} kehadiran untuk ${currentStudents.length} murid?`;
            if (!confirm(confirmMessage)) {
                return;
            }
            
            // Update all students
            currentStudents.forEach(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                if (!paymentData[studentId]) {
                    paymentData[studentId] = { paid: false, present: false };
                }
                paymentData[studentId].present = newStatus;
                
                // Sync each student to Google Sheets
                syncPaymentToGoogleSheets(studentId);
            });
            
            // Save and update
            localStorage.setItem('uasaPaymentData', JSON.stringify(paymentData));
            updatePaymentStatistics();
            updatePaymentStudentsList();
            
            // Show success message
            const successText = newStatus ? 'ditanda hadir' : 'dihilangkan tanda kehadiran';
            showTemporaryMessage(`✅ ${currentStudents.length} murid telah ${successText}!`, 'success');
        }
        
        // Get currently filtered students
        function getCurrentFilteredStudents() {
            const paymentFilter = document.getElementById('paymentFilter')?.value || 'all';
            const classFilter = document.getElementById('classFilter')?.value || 'all';
            const slotFilter = document.getElementById('slotFilter')?.value || 'all';
            const searchTerm = document.getElementById('searchStudent')?.value.toLowerCase() || '';
            
            return registrations.filter(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                
                // Apply attendance filter
                const attendanceFilter = document.getElementById('attendanceFilter')?.value || 'all';
                if (attendanceFilter === 'present' && !payment.present) return false;
                if (attendanceFilter === 'absent' && payment.present) return false;
                
                // Apply payment filter
                if (paymentFilter === 'paid' && !payment.paid) return false;
                if (paymentFilter === 'unpaid' && payment.paid) return false;
                
                if (classFilter !== 'all' && student.kelas !== classFilter) return false;
                if (slotFilter !== 'all' && student.slotMasa !== slotFilter) return false;
                
                if (searchTerm && !student.nama.toLowerCase().includes(searchTerm)) return false;
                
                return true;
            });
        }
        
        // Update mark all button texts
        function updateMarkAllButtonTexts() {
            const currentStudents = getCurrentFilteredStudents();
            
            if (currentStudents.length === 0) {
                document.getElementById('markAllPaymentText').textContent = 'Semua Bayar';
                document.getElementById('markAllAttendanceText').textContent = 'Semua Hadir';
                return;
            }
            
            // Check payment status
            const allPaid = currentStudents.every(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                return payment.paid;
            });
            
            // Check attendance status
            const allPresent = currentStudents.every(student => {
                const studentId = `${student.nama}_${student.kelas}_${student.timestamp}`;
                const payment = paymentData[studentId] || { paid: false, present: false };
                return payment.present;
            });
            
            // Update button texts
            document.getElementById('markAllPaymentText').textContent = allPaid ? 'Batal Semua Bayar' : 'Semua Bayar';
            document.getElementById('markAllAttendanceText').textContent = allPresent ? 'Batal Semua Hadir' : 'Semua Hadir';
        }
        
        // Make functions global for onclick handlers
        window.togglePayment = togglePayment;
        window.toggleAttendance = toggleAttendance;
        window.toggleAllPayment = toggleAllPayment;
        window.toggleAllAttendance = toggleAllAttendance;
        
        // Add event listeners for mark all buttons
        function setupMarkAllButtons() {
            const markAllPaymentBtn = document.getElementById('markAllPaymentBtn');
            const markAllAttendanceBtn = document.getElementById('markAllAttendanceBtn');
            
            if (markAllPaymentBtn) {
                markAllPaymentBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    toggleAllPayment();
                });
            }
            
            if (markAllAttendanceBtn) {
                markAllAttendanceBtn.addEventListener('click', function(e) {
                    e.preventDefault();
                    toggleAllAttendance();
                });
            }
        }

        // Update statistics display
        function updateStatistics() {
            const slot1Count = registrations.filter(r => r.slotMasa === '8.00-9.15 pagi').length;
            const slot2Count = registrations.filter(r => r.slotMasa === '9.30-10.45 pagi').length;
            const totalCount = registrations.length;

            // Update totals
            document.getElementById('totalRegistered').textContent = totalCount;
            document.getElementById('slot1Count').textContent = slot1Count;
            document.getElementById('slot2Count').textContent = slot2Count;

            // Update percentages and progress bars
            if (totalCount > 0) {
                const slot1Percentage = Math.round((slot1Count / totalCount) * 100);
                const slot2Percentage = Math.round((slot2Count / totalCount) * 100);
                
                document.getElementById('slot1Percentage').textContent = `${slot1Percentage}% daripada jumlah`;
                document.getElementById('slot2Percentage').textContent = `${slot2Percentage}% daripada jumlah`;
                
                document.getElementById('slot1Progress').style.width = `${slot1Percentage}%`;
                document.getElementById('slot2Progress').style.width = `${slot2Percentage}%`;
            } else {
                document.getElementById('slot1Percentage').textContent = '0% daripada jumlah';
                document.getElementById('slot2Percentage').textContent = '0% daripada jumlah';
                document.getElementById('slot1Progress').style.width = '0%';
                document.getElementById('slot2Progress').style.width = '0%';
            }

            // Update class breakdown
            const classes = ['4IB', '4IH', '4IK', '4IM', '4IS'];
            classes.forEach(className => {
                const classCount = registrations.filter(r => r.kelas === className).length;
                document.getElementById(`class${className}`).textContent = classCount;
            });

            // Update last updated time
            if (registrations.length > 0) {
                const lastRegistration = registrations[registrations.length - 1];
                document.getElementById('lastUpdated').textContent = lastRegistration.timestamp;
            } else {
                document.getElementById('lastUpdated').textContent = '-';
            }
            
            // Also update payment data and statistics
            initializePaymentData();
            updatePaymentStatistics();
        }
        
        // Tab navigation functions
        function showStatisticsTab() {
            // Update tab buttons
            document.getElementById('statisticsTab').className = 'tab-button active bg-purple-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-purple-700 flex items-center';
            document.getElementById('paymentTab').className = 'tab-button bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-gray-300 flex items-center';
            
            // Show/hide content
            document.getElementById('statisticsContent').classList.remove('hidden');
            document.getElementById('paymentContent').classList.add('hidden');
        }

        // Initialize data on page load
        async function initializeData() {
            console.log('🚀 Memulakan aplikasi...');
            
            // Load registration status first
            registrationOpen = JSON.parse(localStorage.getItem('registrationOpen')) ?? true;
            console.log('📋 Registration status loaded:', registrationOpen);
            
            // Update UI based on registration status immediately
            updateRegistrationStatus();
            
            // Try to load from Google Sheets first, fallback to local data
            try {
                console.log('📡 Attempting to load initial data from Google Sheets...');
                await refreshData();
            } catch (error) {
                console.log('⚠️ Failed to load from Google Sheets, using local data');
                // Fallback to local data
                registrations = JSON.parse(localStorage.getItem('uasaRegistrations')) || [];
                
                // Add some test data if no registrations exist (for testing purposes)
                if (registrations.length === 0) {
                    registrations = [
                        {
                            timestamp: '2024-01-15 10:30:00',
                            nama: 'AHMAD BIN ALI',
                            kelas: '4IB',
                            slotMasa: '8.00-9.15 pagi',
                            telefon: '0123456789'
                        },
                        {
                            timestamp: '2024-01-15 11:00:00',
                            nama: 'SITI FATIMAH',
                            kelas: '4IH',
                            slotMasa: '9.30-10.45 pagi',
                            telefon: '0198765432'
                        },
                        {
                            timestamp: '2024-01-15 11:30:00',
                            nama: 'MUHAMMAD HAFIZ',
                            kelas: '4IK',
                            slotMasa: '8.00-9.15 pagi',
                            telefon: '0176543210'
                        }
                    ];
                    localStorage.setItem('uasaRegistrations', JSON.stringify(registrations));
                }
                
                updateStatistics();
                updateRegistrationStatus();
            }
            
            console.log('✅ Aplikasi siap dengan', registrations.length, 'pendaftaran');
            console.log('🔒 Registration status:', registrationOpen ? 'OPEN' : 'CLOSED');
        }
        
        // Initialize on page load
        initializeData();
        
        // Periodic check for registration status changes (every 5 seconds)
        setInterval(function() {
            const currentStatus = JSON.parse(localStorage.getItem('registrationOpen')) ?? true;
            if (currentStatus !== registrationOpen) {
                console.log('🔄 Registration status changed:', registrationOpen, '->', currentStatus);
                registrationOpen = currentStatus;
                updateRegistrationStatus();
            }
        }, 5000);
        
        // Tab navigation event listeners
        document.getElementById('statisticsTab')?.addEventListener('click', showStatisticsTab);
        document.getElementById('paymentTab')?.addEventListener('click', showPaymentTab);
        
        // Payment filter event listeners
        document.getElementById('attendanceFilter')?.addEventListener('change', updatePaymentStudentsList);
        document.getElementById('paymentFilter')?.addEventListener('change', updatePaymentStudentsList);
        document.getElementById('classFilter')?.addEventListener('change', updatePaymentStudentsList);
        document.getElementById('slotFilter')?.addEventListener('change', updatePaymentStudentsList);
        document.getElementById('searchStudent')?.addEventListener('input', updatePaymentStudentsList);
        

        
        // Call setup function when showing payment tab
        function showPaymentTab() {
            // Update tab buttons
            document.getElementById('statisticsTab').className = 'tab-button bg-gray-200 text-gray-700 px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-gray-300 flex items-center';
            document.getElementById('paymentTab').className = 'tab-button active bg-green-600 text-white px-6 py-3 rounded-lg font-semibold transition-all duration-200 hover:bg-green-700 flex items-center';
            
            // Show/hide content
            document.getElementById('statisticsContent').classList.add('hidden');
            document.getElementById('paymentContent').classList.remove('hidden');
            
            // Update payment data
            initializePaymentData();
            updatePaymentStatistics();
            updatePaymentStudentsList();
            
            // Setup mark all buttons
            setupMarkAllButtons();
        }
        
        // Debug: Check if admin elements exist and add safety checks
        console.log('=== ADMIN ELEMENTS DEBUG ===');
        const adminElements = {
            adminAccessBtn: document.getElementById('adminAccessBtn'),
            adminModal: document.getElementById('adminModal'),
            adminLoginForm: document.getElementById('adminLoginForm'),
            statisticsPage: document.getElementById('statisticsPage'),
            mainContent: document.getElementById('mainContent'),
            cancelAdminBtn: document.getElementById('cancelAdminBtn'),
            backToFormBtn: document.getElementById('backToFormBtn')
        };
        
        Object.entries(adminElements).forEach(([name, element]) => {
            console.log(`${name}:`, element ? '✅ Found' : '❌ Missing');
            if (!element) {
                console.error(`CRITICAL: ${name} element not found!`);
            }
        });
        
        // Add safety check for admin button click
        if (adminElements.adminAccessBtn) {
            console.log('✅ Admin button found, adding click listener...');
            // Remove any existing listeners first
            const newAdminBtn = adminElements.adminAccessBtn.cloneNode(true);
            adminElements.adminAccessBtn.parentNode.replaceChild(newAdminBtn, adminElements.adminAccessBtn);
            
            // Add fresh event listener
            newAdminBtn.addEventListener('click', function(e) {
                e.preventDefault();
                e.stopPropagation();
                console.log('🔐 Admin button clicked!');
                
                const modal = document.getElementById('adminModal');
                if (modal) {
                    console.log('✅ Opening admin modal...');
                    modal.classList.remove('hidden');
                    const passwordInput = document.getElementById('adminPassword');
                    if (passwordInput) {
                        passwordInput.focus();
                        console.log('✅ Password input focused');
                    } else {
                        console.error('❌ Password input not found');
                    }
                } else {
                    console.error('❌ Admin modal not found!');
                }
            });
            console.log('✅ Admin button click listener added successfully');
        } else {
            console.error('❌ CRITICAL: Admin button not found - cannot add click listener!');
        }
        
        // Auto-refresh data every 30 seconds when admin is logged in (from Google Sheets)
        let autoRefreshInterval;
        
        function startAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
            }
            
            autoRefreshInterval = setInterval(async () => {
                if (isAdminLoggedIn) {
                    console.log('🔄 Auto-refresh: Mengambil data dari Google Sheets...');
                    await refreshData();
                }
            }, 30000); // 30 seconds
        }
        
        function stopAutoRefresh() {
            if (autoRefreshInterval) {
                clearInterval(autoRefreshInterval);
                autoRefreshInterval = null;
            }
        }
        
        // Function to update registration status display
        function updateRegistrationStatus() {
            const registrationFormContainer = document.getElementById('registrationFormContainer');
            const registrationClosedMessage = document.getElementById('registrationClosedMessage');
            const adminAccessBtn = document.getElementById('adminAccessBtn');
            
            console.log('🔄 Updating registration status. Open:', registrationOpen);
            
            if (registrationOpen) {
                if (registrationFormContainer) {
                    registrationFormContainer.classList.remove('hidden');
                    registrationFormContainer.style.display = 'block';
                }
                if (registrationClosedMessage) {
                    registrationClosedMessage.classList.add('hidden');
                    registrationClosedMessage.style.display = 'none';
                }
                if (adminAccessBtn) adminAccessBtn.style.display = 'block';
                console.log('✅ Registration form shown');
            } else {
                if (registrationFormContainer) {
                    registrationFormContainer.classList.add('hidden');
                    registrationFormContainer.style.display = 'none';
                }
                if (registrationClosedMessage) {
                    registrationClosedMessage.classList.remove('hidden');
                    registrationClosedMessage.style.display = 'block';
                }
                if (adminAccessBtn) adminAccessBtn.style.display = 'block'; // Admin can still access even when closed
                console.log('❌ Registration form hidden, closed message shown');
            }
            
            // Update admin panel status if in admin mode
            if (isAdminLoggedIn) {
                const statusIcon = document.getElementById('registrationStatusIcon');
                const statusText = document.getElementById('registrationStatusText');
                const toggleBtn = document.getElementById('toggleRegistrationBtn');
                
                if (registrationOpen) {
                    if (statusIcon) statusIcon.textContent = '✅';
                    if (statusText) statusText.textContent = 'Pendaftaran dibuka';
                    if (toggleBtn) {
                        toggleBtn.textContent = 'Tutup Pendaftaran';
                        toggleBtn.className = 'bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors';
                    }
                } else {
                    if (statusIcon) statusIcon.textContent = '❌';
                    if (statusText) statusText.textContent = 'Pendaftaran ditutup';
                    if (toggleBtn) {
                        toggleBtn.textContent = 'Buka Pendaftaran';
                        toggleBtn.className = 'bg-green-600 hover:bg-green-700 text-white font-semibold py-2 px-4 rounded-lg transition-colors';
                    }
                }
                console.log('🔧 Admin panel status updated');
            }
        }
        
        // Admin Controls Event Listeners
        const toggleRegistrationBtn = document.getElementById('toggleRegistrationBtn');
        if (toggleRegistrationBtn) {
            toggleRegistrationBtn.addEventListener('click', function() {
                const toggleBtn = this;
                const newStatus = !registrationOpen;
                const actionText = newStatus ? 'membuka' : 'menutup';
                const confirmText = newStatus ? 'dibuka' : 'ditutup';
                
                // Show confirmation dialog
                const confirmMessage = `Adakah anda pasti mahu ${actionText} pendaftaran?\n\n${newStatus ? '✅ Murid akan dapat mengisi borang pendaftaran' : '❌ Murid tidak akan dapat mengisi borang pendaftaran'}`;
                
                if (!confirm(confirmMessage)) {
                    return;
                }
                
                // Show loading state
                toggleBtn.disabled = true;
                toggleBtn.textContent = 'Mengemas kini...';
                
                try {
                    console.log('🔄 Toggling registration status from', registrationOpen, 'to', newStatus);
                    
                    // Update local status
                    registrationOpen = newStatus;
                    localStorage.setItem('registrationOpen', JSON.stringify(registrationOpen));
                    
                    // Force update UI immediately
                    updateRegistrationStatus();
                    
                    // Show confirmation message
                    showTemporaryMessage(`✅ Pendaftaran telah ${confirmText}!`, 'success');
                    
                    console.log('✅ Registration status updated successfully to:', registrationOpen);
                } catch (error) {
                    console.error('❌ Error toggling registration:', error);
                    showTemporaryMessage('❌ Ralat mengemas kini status pendaftaran', 'warning');
                } finally {
                    // Reset button after a short delay
                    setTimeout(() => {
                        toggleBtn.disabled = false;
                        // Button text will be updated by updateRegistrationStatus()
                    }, 1000);
                }
            });
        } else {
            console.error('toggleRegistrationBtn not found');
        }
        
        // Change Password Modal
        const changePasswordModal = document.getElementById('changePasswordModal');
        const changePasswordBtn = document.getElementById('changePasswordBtn');
        const cancelChangePasswordBtn = document.getElementById('cancelChangePasswordBtn');
        const changePasswordForm = document.getElementById('changePasswordForm');
        
        if (changePasswordBtn && changePasswordModal) {
            changePasswordBtn.addEventListener('click', function() {
                changePasswordModal.classList.remove('hidden');
                const currentPasswordInput = document.getElementById('currentPassword');
                if (currentPasswordInput) {
                    currentPasswordInput.focus();
                }
            });
        } else {
            console.error('Change password elements not found');
        }
        
        if (cancelChangePasswordBtn && changePasswordModal && changePasswordForm) {
            cancelChangePasswordBtn.addEventListener('click', function() {
                changePasswordModal.classList.add('hidden');
                changePasswordForm.reset();
                const currentPasswordError = document.getElementById('currentPasswordError');
                const confirmPasswordError = document.getElementById('confirmPasswordError');
                if (currentPasswordError) currentPasswordError.classList.add('hidden');
                if (confirmPasswordError) confirmPasswordError.classList.add('hidden');
            });
        }
        
        // Close modal when clicking outside
        changePasswordModal.addEventListener('click', function(e) {
            if (e.target === changePasswordModal) {
                changePasswordModal.classList.add('hidden');
                changePasswordForm.reset();
                document.getElementById('currentPasswordError').classList.add('hidden');
                document.getElementById('confirmPasswordError').classList.add('hidden');
            }
        });
        
        // Change Password Form
        changePasswordForm.addEventListener('submit', function(e) {
            e.preventDefault();
            
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            const currentPasswordError = document.getElementById('currentPasswordError');
            const confirmPasswordError = document.getElementById('confirmPasswordError');
            
            // Reset errors
            currentPasswordError.classList.add('hidden');
            confirmPasswordError.classList.add('hidden');
            
            // Validate current password
            if (currentPassword !== adminPassword) {
                currentPasswordError.classList.remove('hidden');
                document.getElementById('currentPassword').focus();
                return;
            }
            
            // Validate password confirmation
            if (newPassword !== confirmPassword) {
                confirmPasswordError.classList.remove('hidden');
                document.getElementById('confirmPassword').focus();
                return;
            }
            
            // Update password
            adminPassword = newPassword;
            localStorage.setItem('adminPassword', adminPassword);
            
            // Close modal and show success
            changePasswordModal.classList.add('hidden');
            changePasswordForm.reset();
            alert('✅ Kata laluan telah berjaya ditukar!');
        });
        
        // Reset Password
        document.getElementById('resetPasswordBtn').addEventListener('click', function() {
            if (confirm('⚠️ Adakah anda pasti mahu reset kata laluan ke default "admin123"?')) {
                adminPassword = 'admin123';
                localStorage.setItem('adminPassword', adminPassword);
                alert('✅ Kata laluan telah direset ke "admin123"');
            }
        });
        
        // Refresh Data Button
        const refreshDataBtn = document.getElementById('refreshDataBtn');
        if (refreshDataBtn) {
            refreshDataBtn.addEventListener('click', async function() {
                const refreshBtn = this;
                const refreshBtnText = document.getElementById('refreshBtnText');
                const originalText = refreshBtnText.textContent;
                
                // Show loading state
                refreshBtn.disabled = true;
                refreshBtnText.textContent = 'Mengemas kini...';
                refreshBtn.querySelector('svg').classList.add('animate-spin');
                
                try {
                    // Fetch data from Google Sheets
                    const success = await refreshData();
                    
                    if (success) {
                        // Show success feedback
                        refreshBtnText.textContent = 'Berjaya!';
                        console.log('✅ Manual refresh successful:', registrations.length, 'registrations');
                    } else {
                        // Show warning for fallback to local data
                        refreshBtnText.textContent = 'Data Tempatan';
                        console.log('⚠️ Manual refresh used local data fallback');
                    }
                    
                    setTimeout(() => {
                        refreshBtnText.textContent = originalText;
                    }, 2000);
                } catch (error) {
                    console.error('❌ Error in manual refresh:', error);
                    refreshBtnText.textContent = 'Ralat';
                    showTemporaryMessage('❌ Ralat mengemas kini data', 'warning');
                    setTimeout(() => {
                        refreshBtnText.textContent = originalText;
                    }, 2000);
                } finally {
                    // Reset button state
                    setTimeout(() => {
                        refreshBtn.disabled = false;
                        refreshBtn.querySelector('svg').classList.remove('animate-spin');
                    }, 2000);
                }
            });
        } else {
            console.error('refreshDataBtn not found');
        }

        // Class Students Modal Functions
        const classStudentsModal = document.getElementById('classStudentsModal');
        const closeClassModalBtn = document.getElementById('closeClassModalBtn');
        
        function showClassStudents(className) {
            // Filter students by class
            const classStudents = registrations.filter(student => student.kelas === className);
            
            // Update modal title
            document.getElementById('classModalTitle').textContent = `Senarai Murid Kelas ${className}`;
            
            // Calculate statistics for this class
            const totalStudents = classStudents.length;
            const slot1Students = classStudents.filter(s => s.slotMasa === '8.00-9.15 pagi').length;
            const slot2Students = classStudents.filter(s => s.slotMasa === '9.30-10.45 pagi').length;
            
            // Update summary
            document.getElementById('classModalTotal').textContent = totalStudents;
            document.getElementById('classModalSlot1').textContent = slot1Students;
            document.getElementById('classModalSlot2').textContent = slot2Students;
            
            // Generate students list
            const classStudentsList = document.getElementById('classStudentsList');
            
            if (totalStudents === 0) {
                classStudentsList.innerHTML = `
                    <div class="text-center py-8">
                        <div class="bg-gray-100 rounded-full p-4 w-16 h-16 mx-auto mb-4">
                            <span class="text-3xl">📚</span>
                        </div>
                        <p class="text-gray-500 font-medium">Tiada murid dari kelas ${className} yang mendaftar lagi</p>
                    </div>
                `;
            } else {
                // Group students by time slot
                const slot1List = classStudents.filter(s => s.slotMasa === '8.00-9.15 pagi');
                const slot2List = classStudents.filter(s => s.slotMasa === '9.30-10.45 pagi');
                
                let studentsHTML = '';
                
                // Slot 1 students
                if (slot1List.length > 0) {
                    studentsHTML += `
                        <div class="mb-6">
                            <div class="flex items-center mb-3">
                                <span class="text-2xl mr-2">🌅</span>
                                <h5 class="text-lg font-bold text-orange-800">Slot 8.00 - 9.15 pagi (${slot1List.length} murid)</h5>
                            </div>
                            <div class="space-y-2">
                    `;
                    
                    slot1List.forEach((student, index) => {
                        studentsHTML += `
                            <div class="flex items-center justify-between p-3 bg-orange-50 rounded-lg border border-orange-200">
                                <div class="flex items-center">
                                    <div class="bg-orange-100 rounded-full w-8 h-8 flex items-center justify-center mr-3">
                                        <span class="text-orange-600 font-bold text-sm">${index + 1}</span>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-orange-800">${student.nama}</p>
                                        <p class="text-sm text-orange-600">${student.kelas}</p>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <p class="text-xs text-orange-500">${student.timestamp}</p>
                                    <p class="text-xs text-orange-600">${student.telefon}</p>
                                </div>
                            </div>
                        `;
                    });
                    
                    studentsHTML += `
                            </div>
                        </div>
                    `;
                }
                
                // Slot 2 students
                if (slot2List.length > 0) {
                    studentsHTML += `
                        <div class="mb-4">
                            <div class="flex items-center mb-3">
                                <span class="text-2xl mr-2">☀️</span>
                                <h5 class="text-lg font-bold text-yellow-800">Slot 9.30 - 10.45 pagi (${slot2List.length} murid)</h5>
                            </div>
                            <div class="space-y-2">
                    `;
                    
                    slot2List.forEach((student, index) => {
                        studentsHTML += `
                            <div class="flex items-center justify-between p-3 bg-yellow-50 rounded-lg border border-yellow-200">
                                <div class="flex items-center">
                                    <div class="bg-yellow-100 rounded-full w-8 h-8 flex items-center justify-center mr-3">
                                        <span class="text-yellow-600 font-bold text-sm">${index + 1}</span>
                                    </div>
                                    <div>
                                        <p class="font-semibold text-yellow-800">${student.nama}</p>
                                        <p class="text-sm text-yellow-600">${student.kelas}</p>
                                    </div>
                                </div>
                                <div class="text-right">
                                    <p class="text-xs text-yellow-500">${student.timestamp}</p>
                                    <p class="text-xs text-yellow-600">${student.telefon}</p>
                                </div>
                            </div>
                        `;
                    });
                    
                    studentsHTML += `
                            </div>
                        </div>
                    `;
                }
                
                classStudentsList.innerHTML = studentsHTML;
            }
            
            // Show modal
            classStudentsModal.classList.remove('hidden');
        }
        
        // Close class modal
        closeClassModalBtn.addEventListener('click', function() {
            classStudentsModal.classList.add('hidden');
        });
        
        // Close modal when clicking outside
        classStudentsModal.addEventListener('click', function(e) {
            if (e.target === classStudentsModal) {
                classStudentsModal.classList.add('hidden');
            }
        });

        // Validate uppercase name input
        document.getElementById('namaInput').addEventListener('input', function() {
            const namaError = document.getElementById('namaError');
            const value = this.value;
            
            if (value && value !== value.toUpperCase()) {
                namaError.classList.remove('hidden');
                this.classList.add('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                this.classList.remove('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
            } else {
                namaError.classList.add('hidden');
                this.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
                this.classList.add('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
            }
        });

        document.getElementById('registrationForm').addEventListener('submit', function(e) {
            e.preventDefault();
            
            // Check registration status from localStorage (most current)
            const currentRegistrationStatus = JSON.parse(localStorage.getItem('registrationOpen')) ?? true;
            registrationOpen = currentRegistrationStatus;
            
            console.log('📝 Form submission attempt. Registration open:', registrationOpen);
            
            // If registration is closed, prevent submission completely
            if (!registrationOpen) {
                console.log('❌ Form submission blocked - registration closed');
                updateRegistrationStatus();
                
                // Show error message
                alert('❌ Maaf! Pendaftaran telah ditutup oleh admin. Sila hubungi Cikgu Khairul untuk maklumat lanjut.');
                
                // Force refresh the page to show closed message
                window.location.reload();
                return;
            }
            
            // Validate uppercase name
            const namaInput = document.getElementById('namaInput');
            const nama = namaInput.value;
            
            if (nama !== nama.toUpperCase()) {
                document.getElementById('namaError').classList.remove('hidden');
                namaInput.focus();
                return;
            }
            
            // Show loading state
            const submitButton = document.querySelector('button[type="submit"]');
            const originalText = submitButton.innerHTML;
            submitButton.innerHTML = '<svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path></svg>Menghantar...';
            submitButton.disabled = true;
            
            // Get form data
            const formData = new FormData(this);
            const kelas = document.querySelector('select').value;
            const slotMasa = formData.get('slot_masa');
            const telefon = document.querySelector('input[type="tel"]').value;
            const timestamp = new Date().toLocaleString('ms-MY', {
                timeZone: 'Asia/Kuala_Lumpur',
                year: 'numeric',
                month: '2-digit',
                day: '2-digit',
                hour: '2-digit',
                minute: '2-digit',
                second: '2-digit'
            });
            
            // Prepare data for Google Sheets
            const data = {
                timestamp: timestamp,
                nama: nama,
                kelas: kelas,
                slotMasa: slotMasa,
                telefon: telefon
            };
            
            // Save to local storage first
            registrations.push(data);
            localStorage.setItem('uasaRegistrations', JSON.stringify(registrations));
            
            // Update statistics immediately
            updateStatistics();

            // Send to Google Sheets
            const googleSheetsUrl = 'https://script.google.com/macros/s/AKfycbxA_6cx4IbdodAmpAPll0c8IfsK-s3rwOeqnBL6bP2fqzmU2BJP8e084a3XnAz_XVsRLA/exec';
            
            fetch(googleSheetsUrl, {
                method: 'POST',
                mode: 'no-cors',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            })
            .then(() => {
                console.log('Data sent to Google Sheets successfully');
                
                // Show success message
                this.style.display = 'none';
                document.getElementById('successMessage').classList.remove('hidden');
                
                // Scroll to success message
                document.getElementById('successMessage').scrollIntoView({ behavior: 'smooth' });
                
                console.log('Data saved:', data);
            })
            .catch(error => {
                console.error('Error sending to Google Sheets:', error);
                
                // Still show success since data is saved locally
                this.style.display = 'none';
                document.getElementById('successMessage').classList.remove('hidden');
                
                // Scroll to success message
                document.getElementById('successMessage').scrollIntoView({ behavior: 'smooth' });
                
                console.log('Data saved locally (Google Sheets failed):', data);
            })
            .finally(() => {
                // Reset button
                submitButton.innerHTML = originalText;
                submitButton.disabled = false;
            });
        });

        // Reset form for new registration
        document.getElementById('daftarBaharu').addEventListener('click', function() {
            // Show form and hide success message
            document.getElementById('registrationForm').style.display = 'block';
            document.getElementById('successMessage').classList.add('hidden');
            
            // Reset form
            document.getElementById('registrationForm').reset();
            document.getElementById('namaError').classList.add('hidden');
            
            // Reset input styling
            const namaInput = document.getElementById('namaInput');
            namaInput.classList.remove('border-red-500', 'focus:ring-red-500', 'focus:border-red-500');
            namaInput.classList.add('border-gray-300', 'focus:ring-indigo-500', 'focus:border-indigo-500');
            
            // Reset radio button styling
            const radioLabels = document.querySelectorAll('label:has(input[type="radio"])');
            radioLabels.forEach(l => {
                l.classList.remove('border-indigo-500', 'bg-indigo-50');
            });
            
            // Scroll to top
            window.scrollTo({ top: 0, behavior: 'smooth' });
        });

        // Add interactive feedback
        const inputs = document.querySelectorAll('input, select');
        inputs.forEach(input => {
            input.addEventListener('focus', function() {
                this.parentElement.classList.add('transform', 'scale-105');
            });
            
            input.addEventListener('blur', function() {
                this.parentElement.classList.remove('transform', 'scale-105');
            });
        });

        // Add hover effects for radio buttons
        const radioLabels = document.querySelectorAll('label:has(input[type="radio"])');
        radioLabels.forEach(label => {
            label.addEventListener('mouseenter', function() {
                this.classList.add('border-indigo-300', 'bg-indigo-50');
            });
            
            label.addEventListener('mouseleave', function() {
                if (!this.querySelector('input').checked) {
                    this.classList.remove('border-indigo-300', 'bg-indigo-50');
                }
            });
            
            const radio = label.querySelector('input[type="radio"]');
            radio.addEventListener('change', function() {
                // Remove selection styling from all labels
                radioLabels.forEach(l => {
                    l.classList.remove('border-indigo-500', 'bg-indigo-50');
                });
                
                // Add selection styling to selected label
                if (this.checked) {
                    label.classList.add('border-indigo-500', 'bg-indigo-50');
                }
            });
        });
    </script>
<script>(function(){function c(){var b=a.contentDocument||a.contentWindow.document;if(b){var d=b.createElement('script');d.innerHTML="window.__CF$cv$params={r:'988de013624ce708',t:'MTc1OTUwOTU2My4wMDAwMDA='};var a=document.createElement('script');a.nonce='';a.src='/cdn-cgi/challenge-platform/scripts/jsd/main.js';document.getElementsByTagName('head')[0].appendChild(a);";b.getElementsByTagName('head')[0].appendChild(d)}}if(document.body){var a=document.createElement('iframe');a.height=1;a.width=1;a.style.position='absolute';a.style.top=0;a.style.left=0;a.style.border='none';a.style.visibility='hidden';document.body.appendChild(a);if('loading'!==document.readyState)c();else if(window.addEventListener)document.addEventListener('DOMContentLoaded',c);else{var e=document.onreadystatechange||function(){};document.onreadystatechange=function(b){e(b);'loading'!==document.readyState&&(document.onreadystatechange=e,c())}}}})();</script></body>
</html>
